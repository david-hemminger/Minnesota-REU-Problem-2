from itertools import *
from sets import Set
import math
from operator import mul    # or mul=lambda x,y:x*y
from fractions import Fraction

#g_lst should be nonempty

def pairs(n,i,r):
    lst = range(n)
    if r == 0:
        return set(combinations(lst,i))
    else:
        size_i_sets = combinations(lst,i)
        pair_sets = Set([])
        for t in size_i_sets:
            t = t
            x = combinations(t,i-r)
            for s in x:
                pair_sets.add((t,s))
        return pair_sets

#print pairs(4,2,1)

def act(elt,x):
    return tuple(sorted(map(lambda i: elt[i],x)))

#print act([0,2,1],(0,1))

def orbit(g_lst,x):
    orbit_set = Set([])
    temp_set = Set([x])
    while len(temp_set)!=0:
        t = temp_set.pop()
        orbit_set.add(t)
        for elt in g_lst:
            gt = act(elt,t)
            if gt not in orbit_set:
                temp_set.add(gt)
    return orbit_set

#print orbit([[1,2,3,0],[1,0,2,3]],(2,3))

def pair_orbit(g_lst,(y,x)):
    orbit_set = Set([])
    temp_set = Set([(y,x)])
    while len(temp_set)!=0:
        (t,r) = temp_set.pop()
        orbit_set.add((t,r))
        for elt in g_lst:
            (gt,gr) = (act(elt,t),act(elt,r))
            if (gt,gr) not in orbit_set:
                temp_set.add((gt,gr))
    return orbit_set

#print pair_orbit([[1,2,3,0]],((2,3),(3,)))

def edge_orbit(g_lst,(y,x)):
    whole_orbit = []
    x_cycles = orbit(g_lst,x)
    y_cycles = orbit(g_lst,y)
    for i in x_cycles:
        for j in y_cycles:
            if set(i).issubset(set(j)):
                whole_orbit.append((sorted(j),sorted(i)))
    return whole_orbit

#print edge_orbit([[1,2,3,0]],((2,3),(3,)))

def grp_i_vertices(g_lst,i):
    n = len(g_lst[0])
    level_i_set = map(tuple,pairs(n,i,0))
    reduced_verts = []
    while len(level_i_set) > 0:
        elt = level_i_set.pop()
        reduced_verts.append(elt)
        orb = orbit(g_lst,elt)
        for i in orb:
            if i in level_i_set:
                level_i_set.remove(i)
    return reduced_verts

#print grp_i_vertices([[1,2,3,4,5,6,0]],2)

def grp_i_edges_no_vert(g_lst,i):
    i = i+1
    # making edges count from bottom level
    n = len(g_lst[0])
    pairs_set = map(tuple,pairs(n,i,1))
    reduced_pairs = []
    while len(pairs_set) > 0:
        elt = pairs_set.pop()
        reduced_pairs.append(elt)
        orbit = map(lambda i: tuple(map(tuple,i)),edge_orbit(g_lst,elt))
#        print 'orbit ' +str(orbit)
 #       print 'pairs_set ' +str(pairs_set)
  #      print 'reduced '+ str(reduced_pairs)
        for i in orbit:
            if i in pairs_set:
                pairs_set.remove(i)
    return reduced_pairs


def grp_i_edges_from_vert(g_lst,i):
    edge_lst = []
    vert_bot = grp_i_vertices(g_lst,i)
    vert_top = grp_i_vertices(g_lst,i+1)
    orb_bot_lst = map(lambda t: orbit(g_lst,t),vert_bot)
    orb_top_lst = map(lambda t: orbit(g_lst,t),vert_top)
    for a in xrange(len(vert_bot)):
        for b in xrange(len(vert_top)):
            if any(set(i).issubset(set(j)) for i in orb_bot_lst[a] for j in orb_top_lst[b]):
                edge_lst.append((vert_top[b],vert_bot[a]))
    return edge_lst

def edges_above_vert(g_lst,v):
    edge_lst = []
    i = len(v)
    orbit_bot = orbit(g_lst,v)
    vert_top = grp_i_vertices(g_lst,i+1)
    orb_top_lst = map(lambda t: orbit(g_lst,t),vert_top)
    for b in xrange(len(vert_top)):
        if any(set(i).issubset(set(j)) for i in orbit_bot for j in orb_top_lst[b]):
            edge_lst.append((vert_top[b],v))
    return edge_lst

def edges_below_vert(g_lst,v):
    edge_lst = []
    i = len(v)
    orbit_top = orbit(g_lst,v)
    vert_bot = grp_i_vertices(g_lst,i-1)
    orb_bot_lst = map(lambda t: orbit(g_lst,t),vert_bot)
    for a in xrange(len(vert_bot)):
        if any(set(i).issubset(set(j)) for j in orbit_top for i in orb_bot_lst[a]):
            edge_lst.append((v,vert_bot[a]))
    return edge_lst

#print edges_above_vert([[1,2,3,4,5,0]],(0,1))

def cyclic_g_lst(n):
    a = range(1,n)
    a.append(0)
    return [a]

def dihedral_g_lst(n):
    a = range(1,n)
    a.append(0)
    b = list(reversed(range(1,n)))
    b = [0]+b
    return [a,b]

n = 9
gl = [[1,2,0,3,4,5,6,7,8],[0,1,3,4,5,2,6,7,8],[0,1,2,3,4,6,5,7,8],[0,1,2,3,4,5,6,8,7]]

for i in range(1,(n+1)/2):
    print 'here is level ' + str(i)
    for j in grp_i_vertices(gl,i):
        print len(edges_above_vert(gl,j)) - len(edges_below_vert(gl,j))
        if len(edges_above_vert(gl,j)) - len(edges_below_vert(gl,j)) <0:
            print edges_above_vert(gl,j)
            print edges_below_vert(gl,j)


'''
for i in range(9):
    print len(grp_i_edges_from_vert([[1,2,0,3,4,5,6,7,8],[0,1,3,4,5,2,6,7,8],[0,1,2,3,4,6,5,7,8],[0,1,2,3,4,5,6,8,7]],i))



for i in range(9):
    print len(grp_i_edges_no_vert([[1,2,0,3,4,5,6,7,8],[0,1,3,4,5,2,6,7,8],[0,1,2,3,4,6,5,7,8],[0,1,2,3,4,5,6,8,7]],i))
'''
