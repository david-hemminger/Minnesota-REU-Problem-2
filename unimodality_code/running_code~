from poset_quotient_constructor import *

#grp = bq.Grp([(1,0,2,3,4,5,6),(0,2,1,3,4,5,6),(0,1,3,2,4,5,6),(0,1,2,4,3,5,6),(0,1,2,3,5,4,6),(0,1,2,3,4,6,5)])
#grp = bq.Grp([(1,2,3,4,5,6,7,8,9,0),(9,8,7,6,5,4,3,2,1,0)])

#grp = bq.Grp([(1,2,3,4,5,6,7,8,0),(0,8,7,6,5,4,3,2,1)])
#poset = Poset_quot(grp)
#grp = bq.Grp([(1,2,0,3,4,5,6,7,8),(0,1,3,4,5,2,6,7,8),(0,1,2,3,4,6,5,7,8),(0,1,2,3,4,5,6,8,7)])
#poset = Poset_quot.edgify(Poset_quot(grp))
#print_stats(poset)

'''
k = 10

print 'cyclic_groups'
for i in range(2,k):
    grp = bq.Grp(bq.cyclic_g_lst(i))
    poset = Poset_quot.edgify(Poset_quot(grp))
#    print_stats(poset)
    print str(('poset dims',i)) +' '+ str(map(len,poset.vertices))
    print str(('matrix dimensions',i)) + ' ' + str(map(np.linalg.matrix_rank,poset.edge_mats))    
    print str(('matrix compositions',i)) +' '+ str(matrix_compositions(poset.edge_mats))


print 'dihedral_groups'
for i in range(2,k):
    grp = bq.Grp(bq.dihedral_g_lst(i))
    poset = Poset_quot.edgify(Poset_quot(grp))
#    print_stats(poset)
    print str(('poset dims',i)) +' '+ str(map(len,poset.vertices))
    print str(('matrix dimensions',i)) + ' ' + str(map(np.linalg.matrix_rank,poset.edge_mats))    
    print str(('matrix compositions',i)) +' '+ str(matrix_compositions(poset.edge_mats))

print 'boolean_algebra'
for i in range(2,k):
    grp = bq.Grp([tuple(range(i))])
    poset = Poset_quot.edgify(Poset_quot(grp))
#    print_stats(poset)
    print str(('poset dims',i)) +' '+ str(map(len,poset.vertices))
    print str(('matrix dimensions',i)) + ' ' + str(map(np.linalg.matrix_rank,poset.edge_mats))    
    print str(('matrix compositions',i)) +' '+ str(matrix_compositions(poset.edge_mats))
'''
